/*Problem Statement:
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.
Input: head = [1,1,2]
Output: [1,2]*/

Solution:
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode current = head;
        while(current!=null && current.next!=null){
            if(current.val==current.next.val){
                current.next=current.next.next;
            }
            else
                current=current.next;
        }
        return head;

    }
}

/*Explanation:
Initialize current as head to traverse the linked list.
Iterate through the list while current and current.next are not null:
  If the current node's value equals the next node's value, skip the duplicate by updating current.next to current.next.next.
  Otherwise, move current forward.
Return head, which now has duplicates removed.*/
